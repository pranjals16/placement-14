import java.util.NoSuchElementException;

public class ImmutableQueue<E>{
	private static class ImmutableStack<E>{ 
		/*ImutableQueue using two stacks*/
		
		private ImmutableStack<E> tail; 	// ImmutableStack object	
		private E head; 					// head of type E
		private int size;  					// stack size
	
		private ImmutableStack(){			// default constructor
			this.head = null;
			this.tail = null;
			this.size = 0;
		}
	
		private ImmutableStack(E inp,ImmutableStack<E> tail){		//overloading constructor
			this.head = inp;
			this.tail = tail;
			this.size = tail.size+1;
		}
		
		public static ImmutableStack emptyStack(){					// stack empty
				return new ImmutableStack();
		}
	
		public boolean isEmpty(){									// checking if stack is empty
			return this.size ==0;
		}

		public ImmutableStack<E> push(E obj){						// stack push
			return new ImmutableStack(obj,this);
		}

		public ImmutableStack<E> toReverseStack(){						// reversing the stack
			ImmutableStack<E> stack = new ImmutableStack<E>();
			ImmutableStack<E> tail = this;
			while(!tail.isEmpty()){
				stack = stack.push(tail.head);
				tail = tail.tail;
			}
			return stack;
		}
	}
	
	private ImmutableStack<E> normal;						// enqueue stack
	private ImmutableStack<E> reverse;						// dequeue stack

	public ImmutableQueue(){
		this.normal = ImmutableStack.emptyStack();
		this.reverse = ImmutableStack.emptyStack();
	}

	public ImmutableQueue(ImmutableStack<E> normal,ImmutableStack<E> reverse){
		this.normal = normal;
		this.reverse = reverse;
	}

	private void normalizeQueue(){								// making normal stack empty
		this.reverse= this.normal.toReverseStack();
		this.normal = ImmutableStack.emptyStack();
	}

	public ImmutableQueue<E> enqueue(E input){
		if(input==null)
			throw new IllegalArgumentException();
		return new ImmutableQueue<E>(this.normal.push(input),this.reverse);
	}

	public ImmutableQueue<E> dequeue(){
		if(this.isEmpty())
			throw new NoSuchElementException();
		if(!this.reverse.isEmpty())
			return new ImmutableQueue<E>(this.normal,this.reverse.tail);
		else
			return new ImmutableQueue<E>(ImmutableStack.emptyStack(),this.normal.toReverseStack().tail);
	}
	
	public E peek(){
		if(this.isEmpty())
			throw new NoSuchElementException();
		if(this.reverse.isEmpty())
			normalizeQueue();
		return this.reverse.head;
	}
	
	public boolean isEmpty(){
		return size()==0;
	}
	
	public int size(){
		return this.normal.size + this.reverse.size;
	}
}