import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;


public class ImmutableQueue<E> {

	/**
	 * @param args
	 */
	private List<E> queue;
	public ImmutableQueue(){
		queue=new ArrayList<E>();
	}
	
	public ImmutableQueue(List<E> queue){
		this.queue=queue;
	}
	public ImmutableQueue<E> enqueue(E e){
		if(e==null)
			throw new IllegalArgumentException();
		List<Integer> copy= new ArrayList<Integer>(queue);
		copy.add(e);
		return new ImmutableQueue<Integer>(copy);
	}
	public ImmutableQueue<Integer> dequeue(){
		if(queue.isEmpty())
			throw new NoSuchElementException();
		List<Integer> copy= new ArrayList<Integer>(queue);
		copy.remove(0);
		return new ImmutableQueue<Integer>(copy);
	}
	public Integer peek(){
		if(queue.isEmpty())
			throw new NoSuchElementException();
		return queue.get(0);
	}
	public int size(){
		if(queue.size()==0)
			return -1;
		return queue.size();
	}
}
