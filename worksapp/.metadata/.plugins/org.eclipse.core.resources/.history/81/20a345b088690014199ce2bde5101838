import java.util.NoSuchElementException;

public class ImmutableQueue<E>{
	private static class ImmutableStack<E>{ 
	
		private E head; 
		private ImmutableStack<E> tail; 
		private int size; 
	
		private ImmutableStack(){
			this.head = null;
			this.tail = null;
			this.size = 0;
		}
	
		private ImmutableStack(E obj,ImmutableStack<E> tail){
			this.head = obj;
			this.tail = tail;
			this.size = tail.size+1;
		}
		
		public static ImmutableStack emptyStack(){
				return new ImmutableStack();
		}
	
		public boolean isEmpty(){
			return this.size ==0;
		}

		public ImmutableStack<E> push(E obj){
			return new ImmutableStack(obj,this);
		}

		public ImmutableStack<E> toReverseStack(){
			ImmutableStack<E> stack = new ImmutableStack<E>();
			ImmutableStack<E> tail = this;
			while(!tail.isEmpty()){
				stack = stack.push(tail.head);
				tail = tail.tail;
			}
			return stack;
		}
	}
	
	private ImmutableStack<E> order;
	private ImmutableStack<E> reverse;

	public ImmutableQueue(){
		this.order = ImmutableStack.emptyStack();
		this.reverse = ImmutableStack.emptyStack();
	}

	public ImmutableQueue(ImmutableStack<E> order,ImmutableStack<E> reverse){
		this.order = order;
		this.reverse = reverse;
	}

	private void balanceQueue(){
		this.reverse= this.order.toReverseStack();
		this.order = ImmutableStack.emptyStack();
	}

	public ImmutableQueue<E> enqueue(E object){
		if(object==null)
			throw new IllegalArgumentException();
		return new ImmutableQueue<E>(this.order.push(object),this.reverse);
	}

	public ImmutableQueue<E> dequeue(){
		if(this.isEmpty())
			throw new NoSuchElementException();
		if(!this.reverse.isEmpty())
			return new ImmutableQueue<E>(this.order,this.reverse.tail);
		else
			return new ImmutableQueue<E>(ImmutableStack.emptyStack(),this.order.toReverseStack().tail);
	}
	public E peek(){
		if(this.isEmpty())
			throw new NoSuchElementException();
		if(this.reverse.isEmpty())
			balanceQueue();
		return this.reverse.head;
	}
	
	public boolean isEmpty(){
		return size() ==0;
	}
	
	public int size(){
		return this.order.size + this.reverse.size;
	}
	
	public double percentage(double x){
		double value = 0;
		if(!this.isEmpty())
			value = size()*x/100;
		return value;
	}
}